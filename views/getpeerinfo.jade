extends layout

block content
	h1= title
	h1.
		fnpm peerinfo
		
	script(type="text/javascript", src="http://d3js.org/d3.v3.min.js")
	script(type="text/javascript", src="http://rawgit.com/benkeen/d3pie/0.1.6/d3pie/d3pie.min.js")
	script(type="text/javascript", src="http://cdnjs.cloudflare.com/ajax/libs/moment.js/2.9.0/moment.min.js")
	
	script.
		var connectedSince = moment(#{nettotals.timemillis}).fromNow();
		document.write(
			"I am connected to <strong> " + #{data.length} + "peers </strong> and have sent <strong>" + #{Math.round(nettotals.totalbytessent *100 / (1024*1024))/100} + "MB</strong> and received <strong>" + #{Math.round(nettotals.totalbytesrecv *100 / (1024*1024))/100} + "MB</strong> since " + connectedSince.toString() + ".");
		
	br 
	script.
		document.write("Statistics generated at " + (new Date()).toString() + ".");
		
	each peer, index in data
		#mypie
		
		script(type="text/javascript").
			var ct = #{peer.conntime} * 1000;
			//console.log(ct);
			var tconnected = moment(ct).fromNow();
			var host = "#{peer.addr}";
			//console.log(host.split(":",1));
			var hostcolor = "#{colors.out}";
			if (#{peer.inbound}) {
				hostcolor = "#{colors.in}";
			}
			
			var textinbound;
			if (#{peer.inbound}) {
					textfooter = "inbound " + tconnected;
				} else {
					textfooter = "outbound " + tconnected;
				}
			
			var donutsize;
			if (#{(peer.bytesrecv + peer.bytessent) / (1024*1024)} < 1) {
					donutsize = "99%";
				} else {
					donutsize = "85%";
				}
			
			var pie = new d3pie("mypie", {
			  header: {
			    title: {
			      //text: "peer #{index}, #{peer.inbound}",
				  text: host.split(":",1),
				  color: hostcolor,
				  subtitle: {
					  text: "ping!",
					  },
			    },
			    location: "pie-center",
				subtitlepadding: 50,
			  },
			  footer: {
			  		text: textfooter,
					location: "center"
			  	},
			  size: {
			    canvasHeight: 300,
			    canvasWidth: 350,  
			   // pieInnerRadius: "#{peer.bytesrecv / (1024*1024)}"
				pieInnerRadius: donutsize
			  },
			  data: {
			    sortOrder: "label-asc",
			    content: [
			      { label: "in: #{Math.round(peer.bytesrecv *100 / (1024*1024))/100} MB", value: #{peer.bytesrecv / (1024*1024)}, color: "#{colors.in}" },
			      { label: "out: #{Math.round(peer.bytessent *100 / (1024*1024))/100} MB", value: #{peer.bytessent / (1024*1024)}, color: "#{colors.out}"}
			    ]
			  }
			});				